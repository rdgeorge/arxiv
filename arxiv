#!/usr/bin/env python

"""
This script queries arxiv for the latest papers and prints the most relevant,
based on a keyword search of their titles.
"""

from __future__ import print_function
import argparse
import re
try:
    import urllib.request as req
except ImportError:
    import sys
    reload(sys)  # Hack to put setdefaultencoding back in after python startup
    sys.setdefaultencoding("utf-8")  # Output utf-8 to terminal
    import urllib2 as req

import feedparser


def title_relevance(title, keywords):
    """
    Return a float denoting the relevance of a string given keywords

    Parameters
    ----------
    title : string
        The string to determine a relevance for.
    keywords : dictionary of string:int pairs
        The keywords to search the string for and the weights given to them.

    Returns
    -------
    float, list :
        The sum of the weights of all keywords in the string, and the keywords
        found.
    """
    filler_words = ('a', 'an', 'and', 'are', 'as', 'at', 'by',
                    'can', "can't", 'cannot', 'did', 'do', "don't",
                    'for', 'from', 'how', 'in', 'is', 'not', 'of',
                    'the', 'they', 'their', 'to',
                    'when', 'which', 'why', 'with')
    relevance = 0

    # Remove filler words from title
    relevant_keywords = []
    title = title.lower().split()
    for word in filler_words:
        while word in title:
            del(title[title.index(word)])
    title = ' '.join(title)

    for keyword in keywords:
        if re.search(keyword, title) is not None:
            relevance += keywords[keyword]
            relevant_keywords.append(keyword)
    return float(relevance) / len(title.split()), relevant_keywords


def main():
    """
    Accepts and processes command-line arguments and queries arxiv database
    """
    parser = argparse.ArgumentParser(description="Query arXiv for the latest "
                                                 "astro-ph.CO or HE papers and"
                                                 "display the most relevant")
    parser.add_argument('--he', action='store_true',
                        help='Search astro-ph.HE instead of astro-ph.CO')
    parser.add_argument('--keywords', action='store_true',
                        help='Display the keywords matched in each title')
    parser.add_argument('title', nargs='*', default=None,
                        help='A paper title to calculate the weight of and '
                             'list the keywords found within'               )
    args = parser.parse_args()

    # List the keywords and weights (keywords as regular expressions)
    keywords = {r'\b' 'smg' r'\b': 10,
                r'\b' 'ism' r'\b': 8,
                'millimet': 8,
                'alma': 6,
                'herschel': 6,
                r'\b' 'merg': 6,
                'ulirg': 6,
                r'\b' 'agn' r'\b': 4,
                'cii': 4,
                r'\b' 'dust': 4,
                r'\b' 'emi': 4,
                r'\b' 'evol': 4,
                r'\b' 'form': 4,
                'j=': 4,
                r'\b' 'lens': 4,
                'major': 4,
                'medium': 4,
                'molecular': 4,
                'pdbi': 4,
                'qso': 4,
                'quasar': 4,
                r'\b' 'sed' r'\b': 4,
                'spectra': 4,
                'starburst': 4,
                'sub': 4,
                'turbulent': 4,
                'active': 2,
                'distant': 2,
                'distribution': 2,
                'energy': 2,
                'fragment': 2,
                r'\b' 'gala': 2,
                'gas': 2,
                'gravitational': 2,
                'grow': 2,
                'high': 2,
                'infra' '-?' 'red': 2,
                r'[\bfmn]' 'ir' r'\b': 2,
                r'\b' 'inter': 2,
                'lumin': 2,
                'massive': 2,
                'minor': 2,
                'number': 2,
                'observ': 2,
                'probe': 2,
                'propert': 2,
                'redshift': 2,
                'relation': 2,
                'simulation': 2,
                r'\b' 'sne' r'\b': 2,
                'source': 2,
                'star': 2,
                'supernov': 2,
                'survey': 2,
                'theory': 2,
                'ultra': 2,
               }

    if args.title != []:
        relevance, keywords = title_relevance(' '.join(args.title), keywords)
        print("The title has a relevance of {0:.1f}".format(relevance))
        print("The following keywords were found: {0}".format(keywords))
        return

    # Query arxiv
    cat = 'astro-ph.CO'
    if args.he is True:
        cat = 'astro-ph.HE'
    url = ('http://export.arxiv.org/api/query?search_query='
           'cat:' + cat + ''
           '&start=0'
           '&max_results=500'
           #sortBy can be "relevance", "lastUpdatedDate", "submittedDate"
           '&sortBy=submittedDate'
           '&sortOrder=descending')
    data = req.urlopen(url).read()
    page = feedparser.parse(data)

    # Sort titles by relevance
    articles = [[-1, entry['id'][21:], entry['title'], []]
                for entry in page['entries']              ]
    for article in articles:
        article[0], article[3] = title_relevance(article[2], keywords)
    articles.sort(key=lambda article: article[0], reverse=False)

    for article in articles:
        if article[0] > 0.7:
            if args.keywords is True:
                print("{0:.1f}  {1} {2} {3}".format(article[0], article[1],
                                                    article[2], article[3]))
            else:
                print("{0:.1f}  {1} {2}".format(article[0], article[1],
                                                article[2])            )


if __name__ == '__main__':
    main()

